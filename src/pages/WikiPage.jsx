import React, { useState, useMemo, useCallback } from "react";
import markdownFiles from "../markdown_test.json";
import {
  downloadAllMarkdown,
  initializeMermaid,
  buildSidebarTree,
  extractHeadings,
} from "../utils";
import WikiHeader from "../components/WikiHeader";
import WikiContent from "../components/WikiContent";
import SidebarTree from "../components/SidebarTree";
import TableOfContents from "../components/TableOfContents";
import MermaidModal from "../components/MermaidModal";
import { FolderTree } from "lucide-react";
import clsx from "clsx";
import ScrollableDiv from "../components/ScrollableDiv";

initializeMermaid();

const WikiPage = () => {
  // Memoize tree construction to avoid rebuilding on every render
  const tree = useMemo(() => buildSidebarTree(markdownFiles), []);
  
  const [selectedPage, setSelectedPage] = useState(Object.keys(markdownFiles)[0]);
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [expandedFolders, setExpandedFolders] = useState({});
  const [searchTerm, setSearchTerm] = useState("");
  const [mermaidModalOpen, setMermaidModalOpen] = useState(false);
  const [mermaidChart, setMermaidChart] = useState("");
  const [mermaidTransform, setMermaidTransform] = useState({ scale: 1, x: 0, y: 0 });

  // Optimize filtering with better memoization
  const filteredTree = useMemo(() => {
    if (!searchTerm.trim()) return tree;
    
    const lowerSearchTerm = searchTerm.toLowerCase();
    const recurse = (node) => {
      const result = {};
      for (const [k, v] of Object.entries(node)) {
        if (k.toLowerCase().includes(lowerSearchTerm)) {
          result[k] = v;
        } else if (v && typeof v === "object") {
          const sub = recurse(v);
          if (Object.keys(sub).length) {
            result[k] = sub;
          }
        }
      }
      return result;
    };
    return recurse(tree);
  }, [searchTerm, tree]);

  // Memoize headings extraction
  const headings = useMemo(() => 
    extractHeadings(markdownFiles[selectedPage]), 
    [selectedPage]
  );

  const handleTocClick = useCallback((id) => {
    document.getElementById(id)?.scrollIntoView({
      behavior: "smooth",
      block: "start",
    });
  }, []);

  // Memoize page navigation logic
  const pageNavigation = useMemo(() => {
    const pageKeys = Object.keys(markdownFiles);
    const currentIndex = pageKeys.indexOf(selectedPage);
    return {
      hasNextPage: currentIndex < pageKeys.length - 1,
      nextPage: pageKeys[currentIndex + 1]
    };
  }, [selectedPage]);

  const handleNextPage = useCallback(() => {
    if (pageNavigation.hasNextPage) {
      setSelectedPage(pageNavigation.nextPage);
    }
  }, [pageNavigation]);

  // Optimize expanded folders state update
  const handleSetExpandedFolders = useCallback((updater) => {
    setExpandedFolders(updater);
  }, []);

  // Memoize search term handler
  const handleSearchChange = useCallback((e) => {
    setSearchTerm(e.target.value);
  }, []);

  // Mermaid expand handler - memoized to prevent unnecessary re-renders
  const handleExpandMermaid = useCallback((chart) => {
    setMermaidChart(chart);
    setMermaidModalOpen(true);
    setMermaidTransform({ scale: 1, x: 0, y: 0 }); // Reset transform on open
  }, []);

  // Memoize the sidebar toggle handler
  const handleToggleSidebar = useCallback(() => {
    setIsCollapsed(c => !c);
  }, []);

  // Memoize the download handler
  const handleDownloadAll = useCallback(() => {
    downloadAllMarkdown(markdownFiles, "all_markdown.zip");
  }, []);

  const sidebarHeader = useMemo(() => (
    <div className="sticky top-0 z-10 border-b bg-background/80 backdrop-blur px-3 py-2.5">
      <div className="flex items-center gap-2 text-foreground">
        <FolderTree className="h-4 w-4 text-muted-foreground" />
        <span className="text-sm font-medium">Docs</span>
      </div>
    </div>
  ), []);

  const sidebarFooter = useMemo(() => (
    <div className="sticky bottom-0 mt-auto border-t bg-background px-3 py-2 text-[11px] text-muted-foreground">
      Markdown docs generated by AI
    </div>
  ), []);

  return (
    <div className="flex flex-col h-screen bg-gray-50 text-gray-900 ">
      {/* Top Header */}
      <WikiHeader
        isSidebarCollapsed={isCollapsed}
        handleToggleSidebar={handleToggleSidebar}
        handleDownloadAll={handleDownloadAll}
      />

      {/* Main 3-column layout */}
      <div className="flex flex-1 overflow-hidden">
        {/* Sidebar */}
        <aside
          className={clsx(
            "flex flex-col border-r bg-background transition-[width] duration-300 ease-out",
            "border-slate-200",
            isCollapsed ? "w-0 min-w-0 overflow-hidden" : "w-68"
          )}
          style={{ zIndex: 1 }}
          aria-hidden={isCollapsed}
        >
          {!isCollapsed && (
            <>
              {sidebarHeader}
              <ScrollableDiv className="flex-grow overflow-y-auto p-2.5">
                <nav className="space-y-1.5" role="tree" aria-label="Sidebar tree">
                  {/* Search */}
                  <div className="p-2">
                    <input
                      type="text"
                      value={searchTerm}
                      onChange={handleSearchChange}
                      placeholder="Search pages..."
                      className="w-full px-2 py-1 border rounded text-sm"
                    />
                  </div>
                  {/* Tree */}
                  <SidebarTree
                    tree={filteredTree}
                    parentPath=""
                    isSidebarCollapsed={isCollapsed}
                    expandedFolders={expandedFolders}
                    setExpandedFolders={handleSetExpandedFolders}
                    selectedPage={selectedPage}
                    setSelectedPage={setSelectedPage}
                  />
                </nav>
              </ScrollableDiv>
              {sidebarFooter}
            </>
          )}
        </aside>

        {/* Main Content */}
        <div className="flex-1 flex flex-col overflow-auto bg-white">
          <WikiContent
            content={markdownFiles[selectedPage]}
            onExpandMermaid={handleExpandMermaid}
          />
          {/* Next Page Button */}
          {pageNavigation.hasNextPage && (
            <div className="p-4 flex justify-end">
              <button
                onClick={handleNextPage}
                className="px-4 py-2 bg-blue-400 text-white rounded hover:bg-blue-700 transition"
              >
                Next Page
              </button>
            </div>
          )}
        </div>

        {/* On This Page (Table of Contents) */}
        <TableOfContents headings={headings} onTocClick={handleTocClick} />
      </div>

      {/* Mermaid Modal */}
      <MermaidModal
        chart={mermaidChart}
        isOpen={mermaidModalOpen}
        onClose={() => setMermaidModalOpen(false)}
        transform={mermaidTransform}
        setTransform={setMermaidTransform}
      />
    </div>
  );
};

export default WikiPage;